{% set name = "qca" %}
{% set version = "2.1.3" %}
{% set md5 = "bd646d08fdc1d9be63331a836ecd528f" %}

package:
  name: qca
  version: {{ version }}

source:
  fn: v{{ version }}.tar.gz
  url: https://github.com/KDE/qca/archive/v{{ version }}.tar.gz
  md5: {{ md5 }}
  patches:
    # Patch to make OpenSSL 1.1 work. Applies commits from the QCA repo not yet
    # included a in a release. Source:
    # https://raw.githubusercontent.com/flathub/org.qgis.qgis/master/qca-openssl-1.1.patch
    - qca-openssl-1.1.patch

build:
  number: 1003

requirements:
  build:
    - cmake
    - pkg-config  # [unix]
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
  host:
    - qt
  run:
    - qt

test:
  commands:
    - test -f ${PREFIX}/lib/libqca-qt5.so  # [linux]
    - test -d ${PREFIX}/lib/qca-qt5.framework  # [osx]
    - if not exist %LIBRARY_BIN%\\qca-qt5.dll exit 1  # [win]

about:
  home: http://delta.affinix.com/qca/
  license: LGPL-2.1
  license_file: COPYING
  summary: Qt Cryptographic Architecture (QCA) provides a straightforward and cross-platform crypto API, using Qt datatypes and conventions.
  description: |
    Taking a hint from the similarly-named Java Cryptography Architecture, QCA
    aims to provide a straightforward and cross-platform crypto API, using Qt
    datatypes and conventions. QCA separates the API from the implementation,
    using plugins known as Providers. The advantage of this model is to allow
    applications to avoid linking to or explicitly depending on any particular
    cryptographic library. This allows one to easily change or upgrade crypto
    implementations without even needing to recompile the application! QCA
    should work everywhere Qt does, including Windows/Unix/MacOSX.
  doc_url: http://delta.affinix.com/docs/qca/
  dev_url: https://quickgit.kde.org/?p=qca.git

extra:
  recipe-maintainers:
    - ceholden
