{% set version = "2.3.9" %}

package:
  name: qca
  version: {{ version }}

source:
  url: https://github.com/KDE/qca/archive/v{{ version }}.tar.gz
  sha256: 21d1dc25d1ffed87eec1c1d3cd90cca36e5a6612d8cd9da69970e0512bfd05b0
  patches:
    - enable_language.patch

build:
  number: 0
  skip: true  # [win and vc<14]

requirements:
  build:
    - cmake
    - make  # [linux]
    - pkg-config
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
  host:
    - qt-main
    - openssl
  run:
    - qt-main
    - openssl

test:
  commands:
    - test -f ${PREFIX}/lib/libqca-qt5.so  # [linux]
    - test -d ${PREFIX}/lib/qca-qt5.framework  # [osx]
    - if not exist %LIBRARY_BIN%\\qca-qt5.dll exit 1  # [win]
    - qcatool-qt5 --noprompt --newpass= key make rsa 2048 test.key  # [unix]
    - qcatool-qt5.exe  --noprompt --newpass= key make rsa 2048 test.key  # [win]

about:
  home: https://userbase.kde.org/QCA
  license: LGPL-2.1-only
  license_file: COPYING
  summary: Qt Cryptographic Architecture (QCA) provides a straightforward and cross-platform crypto API, using Qt datatypes and conventions.
  description: |
    Taking a hint from the similarly-named Java Cryptography Architecture, QCA
    aims to provide a straightforward and cross-platform crypto API, using Qt
    datatypes and conventions. QCA separates the API from the implementation,
    using plugins known as Providers. The advantage of this model is to allow
    applications to avoid linking to or explicitly depending on any particular
    cryptographic library. This allows one to easily change or upgrade crypto
    implementations without even needing to recompile the application! QCA
    should work everywhere Qt does, including Windows/Unix/MacOSX.
  doc_url: http://delta.affinix.com/docs/qca/
  dev_url: https://quickgit.kde.org/?p=qca.git

extra:
  recipe-maintainers:
    - ceholden
    - izahn
    - gillins
    - SrNetoChan
